
apply plugin: 'maven-publish'
apply plugin: 'signing'

import java.net.URI
import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse
import java.net.http.HttpRequest.BodyPublishers
import java.net.http.HttpResponse.BodyHandlers
import java.util.Base64

// Configure these in your $USER_HOME/.gradle/gradle.properties
if (!project.hasProperty("sonatypeUsername")) {
    ext.sonatypeUsername = ''
}
if (!project.hasProperty("sonatypePassword")) {
    ext.sonatypePassword = ''
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

tasks.named("assemble") {
    dependsOn(javadocJar, sourcesJar)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = "${project.group}:${project.name}"
                description = "${project.description}"
                url = 'https://github.com/netmikey/testprocesses'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Mike Meessen'
                        email = 'netmikey@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/netmikey/testprocesses.git'
                    developerConnection = 'scm:git:ssh://github.com:netmikey/testprocesses.git'
                    url = 'https://github.com/netmikey/testprocesses'
                }
            }

            from components.java
            artifact(sourcesJar)
            artifact(javadocJar)

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }

    repositories {
        maven {
            url = "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
            credentials {
                username = sonatypeUsername
                password = sonatypePassword
            }
        }
    }
}

if (!project.hasProperty('noSigning')) {
    signing {
        useGpgCmd()
        sign publishing.publications.mavenJava
    }
}

task finalizeMavenCentralPublish() {
    doLast {
        println "Finalizing maven central publish..."
        def url = 'https://ossrh-staging-api.central.sonatype.com/manual/upload/defaultRepository/io.github.netmikey'

        def client = HttpClient.newHttpClient()

        def auth = "${sonatypeUsername}:${sonatypePassword}"
        def encodedAuth = Base64.encoder.encodeToString(auth.bytes)
        def authHeader = "Basic ${encodedAuth}"

        def request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .header("Content-Type", "application/json")
                .header("Authorization", authHeader)
                .POST(BodyPublishers.ofString(""))
                .build()

        def response = client.send(request, BodyHandlers.ofString())

        println "Response Code: ${response.statusCode()}"
        println "Response Body:\n${response.body()}"
        println "Don't forget to publish the deployment on https://central.sonatype.com/publishing/deployments"
    }
}

publish.finalizedBy(finalizeMavenCentralPublish)
